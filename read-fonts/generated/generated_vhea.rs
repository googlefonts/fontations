// THIS FILE IS AUTOGENERATED.
// Any changes to this file will be overwritten.
// For more information about how codegen works, see font-codegen/README.md

#[allow(unused_imports)]
use crate::codegen_prelude::*;

#[derive(Copy, Clone, Debug, bytemuck :: AnyBitPattern)]
#[repr(C)]
#[repr(packed)]
pub struct VheaFixedFields {
    pub version: BigEndian<Version16Dot16>,
    pub ascender: BigEndian<FWord>,
    pub descender: BigEndian<FWord>,
    pub line_gap: BigEndian<FWord>,
    pub advance_height_max: BigEndian<UfWord>,
    pub min_top_side_bearing: BigEndian<FWord>,
    pub min_bottom_side_bearing: BigEndian<FWord>,
    pub y_max_extent: BigEndian<FWord>,
    pub caret_slope_rise: BigEndian<i16>,
    pub caret_slope_run: BigEndian<i16>,
    pub caret_offset: BigEndian<i16>,
    pub reserved1: BigEndian<i16>,
    pub reserved2: BigEndian<i16>,
    pub reserved3: BigEndian<i16>,
    pub reserved4: BigEndian<i16>,
    pub metric_data_format: BigEndian<i16>,
    pub number_of_long_ver_metrics: BigEndian<u16>,
}

impl FixedSize for VheaFixedFields {
    const RAW_BYTE_LEN: usize = Version16Dot16::RAW_BYTE_LEN
        + FWord::RAW_BYTE_LEN
        + FWord::RAW_BYTE_LEN
        + FWord::RAW_BYTE_LEN
        + UfWord::RAW_BYTE_LEN
        + FWord::RAW_BYTE_LEN
        + FWord::RAW_BYTE_LEN
        + FWord::RAW_BYTE_LEN
        + i16::RAW_BYTE_LEN
        + i16::RAW_BYTE_LEN
        + i16::RAW_BYTE_LEN
        + i16::RAW_BYTE_LEN
        + i16::RAW_BYTE_LEN
        + i16::RAW_BYTE_LEN
        + i16::RAW_BYTE_LEN
        + i16::RAW_BYTE_LEN
        + u16::RAW_BYTE_LEN;
}

/// The [vhea](https://docs.microsoft.com/en-us/typography/opentype/spec/vhea) Vertical Header Table
#[derive(Debug, Clone, Copy)]
#[doc(hidden)]
pub struct VheaMarker {}

impl VheaMarker {
    pub fn version_byte_range(&self) -> Range<usize> {
        let start = 0;
        start..start + Version16Dot16::RAW_BYTE_LEN
    }

    pub fn ascender_byte_range(&self) -> Range<usize> {
        let start = self.version_byte_range().end;
        start..start + FWord::RAW_BYTE_LEN
    }

    pub fn descender_byte_range(&self) -> Range<usize> {
        let start = self.ascender_byte_range().end;
        start..start + FWord::RAW_BYTE_LEN
    }

    pub fn line_gap_byte_range(&self) -> Range<usize> {
        let start = self.descender_byte_range().end;
        start..start + FWord::RAW_BYTE_LEN
    }

    pub fn advance_height_max_byte_range(&self) -> Range<usize> {
        let start = self.line_gap_byte_range().end;
        start..start + UfWord::RAW_BYTE_LEN
    }

    pub fn min_top_side_bearing_byte_range(&self) -> Range<usize> {
        let start = self.advance_height_max_byte_range().end;
        start..start + FWord::RAW_BYTE_LEN
    }

    pub fn min_bottom_side_bearing_byte_range(&self) -> Range<usize> {
        let start = self.min_top_side_bearing_byte_range().end;
        start..start + FWord::RAW_BYTE_LEN
    }

    pub fn y_max_extent_byte_range(&self) -> Range<usize> {
        let start = self.min_bottom_side_bearing_byte_range().end;
        start..start + FWord::RAW_BYTE_LEN
    }

    pub fn caret_slope_rise_byte_range(&self) -> Range<usize> {
        let start = self.y_max_extent_byte_range().end;
        start..start + i16::RAW_BYTE_LEN
    }

    pub fn caret_slope_run_byte_range(&self) -> Range<usize> {
        let start = self.caret_slope_rise_byte_range().end;
        start..start + i16::RAW_BYTE_LEN
    }

    pub fn caret_offset_byte_range(&self) -> Range<usize> {
        let start = self.caret_slope_run_byte_range().end;
        start..start + i16::RAW_BYTE_LEN
    }

    pub fn reserved1_byte_range(&self) -> Range<usize> {
        let start = self.caret_offset_byte_range().end;
        start..start + i16::RAW_BYTE_LEN
    }

    pub fn reserved2_byte_range(&self) -> Range<usize> {
        let start = self.reserved1_byte_range().end;
        start..start + i16::RAW_BYTE_LEN
    }

    pub fn reserved3_byte_range(&self) -> Range<usize> {
        let start = self.reserved2_byte_range().end;
        start..start + i16::RAW_BYTE_LEN
    }

    pub fn reserved4_byte_range(&self) -> Range<usize> {
        let start = self.reserved3_byte_range().end;
        start..start + i16::RAW_BYTE_LEN
    }

    pub fn metric_data_format_byte_range(&self) -> Range<usize> {
        let start = self.reserved4_byte_range().end;
        start..start + i16::RAW_BYTE_LEN
    }

    pub fn number_of_long_ver_metrics_byte_range(&self) -> Range<usize> {
        let start = self.metric_data_format_byte_range().end;
        start..start + u16::RAW_BYTE_LEN
    }
}

impl MinByteRange for VheaMarker {
    fn min_byte_range(&self) -> Range<usize> {
        0..self.number_of_long_ver_metrics_byte_range().end
    }
}

impl TopLevelTable for Vhea<'_> {
    /// `vhea`
    const TAG: Tag = Tag::new(b"vhea");
}

impl<'a> FontRead<'a> for Vhea<'a> {
    #[inline]
    fn read(data: FontData<'a>) -> Result<Self, ReadError> {
        let (cursor, table_data) = Cursor::start::<VheaFixedFields>(data)?;
        let _header = table_data.header();
        cursor.finish(VheaMarker {}, table_data)
    }
}

/// The [vhea](https://docs.microsoft.com/en-us/typography/opentype/spec/vhea) Vertical Header Table
pub type Vhea<'a> = TableRef<'a, VheaMarker, VheaFixedFields>;

#[allow(clippy::needless_lifetimes)]
impl<'a> Vhea<'a> {
    /// The major/minor version (1, 1)
    #[inline]
    pub fn version(&self) -> Version16Dot16 {
        self.fixed_fields().version.get()
    }

    /// Typographic ascent.
    #[inline]
    pub fn ascender(&self) -> FWord {
        self.fixed_fields().ascender.get()
    }

    /// Typographic descent.
    #[inline]
    pub fn descender(&self) -> FWord {
        self.fixed_fields().descender.get()
    }

    /// Typographic line gap. Negative LineGap values are treated as
    /// zero in some legacy platform implementations.
    #[inline]
    pub fn line_gap(&self) -> FWord {
        self.fixed_fields().line_gap.get()
    }

    /// Maximum advance height value in 'vmtx' table.
    #[inline]
    pub fn advance_height_max(&self) -> UfWord {
        self.fixed_fields().advance_height_max.get()
    }

    /// Minimum top sidebearing value in 'vmtx' table for glyphs with
    /// contours (empty glyphs should be ignored).
    #[inline]
    pub fn min_top_side_bearing(&self) -> FWord {
        self.fixed_fields().min_top_side_bearing.get()
    }

    /// Minimum bottom sidebearing value
    #[inline]
    pub fn min_bottom_side_bearing(&self) -> FWord {
        self.fixed_fields().min_bottom_side_bearing.get()
    }

    /// Defined as max( tsb + (yMax-yMin)).
    #[inline]
    pub fn y_max_extent(&self) -> FWord {
        self.fixed_fields().y_max_extent.get()
    }

    /// Used to calculate the slope of the cursor (rise/run); 1 for
    /// vertical caret, 0 for horizontal.
    #[inline]
    pub fn caret_slope_rise(&self) -> i16 {
        self.fixed_fields().caret_slope_rise.get()
    }

    /// 0 for vertical caret, 1 for horizontal.
    #[inline]
    pub fn caret_slope_run(&self) -> i16 {
        self.fixed_fields().caret_slope_run.get()
    }

    /// The amount by which a slanted highlight on a glyph needs to be
    /// shifted to produce the best appearance. Set to 0 for
    /// non-slanted fonts
    #[inline]
    pub fn caret_offset(&self) -> i16 {
        self.fixed_fields().caret_offset.get()
    }

    /// 0 for current format.
    #[inline]
    pub fn metric_data_format(&self) -> i16 {
        self.fixed_fields().metric_data_format.get()
    }

    /// Number of advance heights in the vertical metrics (`vmtx`) table.
    #[inline]
    pub fn number_of_long_ver_metrics(&self) -> u16 {
        self.fixed_fields().number_of_long_ver_metrics.get()
    }
}

#[cfg(feature = "experimental_traverse")]
impl<'a> SomeTable<'a> for Vhea<'a> {
    fn type_name(&self) -> &str {
        "Vhea"
    }
    fn get_field(&self, idx: usize) -> Option<Field<'a>> {
        match idx {
            0usize => Some(Field::new("version", self.version())),
            1usize => Some(Field::new("ascender", self.ascender())),
            2usize => Some(Field::new("descender", self.descender())),
            3usize => Some(Field::new("line_gap", self.line_gap())),
            4usize => Some(Field::new("advance_height_max", self.advance_height_max())),
            5usize => Some(Field::new(
                "min_top_side_bearing",
                self.min_top_side_bearing(),
            )),
            6usize => Some(Field::new(
                "min_bottom_side_bearing",
                self.min_bottom_side_bearing(),
            )),
            7usize => Some(Field::new("y_max_extent", self.y_max_extent())),
            8usize => Some(Field::new("caret_slope_rise", self.caret_slope_rise())),
            9usize => Some(Field::new("caret_slope_run", self.caret_slope_run())),
            10usize => Some(Field::new("caret_offset", self.caret_offset())),
            11usize => Some(Field::new("metric_data_format", self.metric_data_format())),
            12usize => Some(Field::new(
                "number_of_long_ver_metrics",
                self.number_of_long_ver_metrics(),
            )),
            _ => None,
        }
    }
}

#[cfg(feature = "experimental_traverse")]
#[allow(clippy::needless_lifetimes)]
impl<'a> std::fmt::Debug for Vhea<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        (self as &dyn SomeTable<'a>).fmt(f)
    }
}
