// THIS FILE IS AUTOGENERATED.
// Any changes to this file will be overwritten.
// For more information about how codegen works, see font-codegen/README.md

#[allow(unused_imports)]
use crate::codegen_prelude::*;

#[derive(Copy, Clone, Debug, bytemuck :: AnyBitPattern)]
#[repr(C)]
#[repr(packed)]
pub struct MetaFixedFields {
    pub version: BigEndian<u32>,
    pub flags: BigEndian<u32>,
    pub reserved: BigEndian<u32>,
    pub data_maps_count: BigEndian<u32>,
}

impl FixedSize for MetaFixedFields {
    const RAW_BYTE_LEN: usize =
        u32::RAW_BYTE_LEN + u32::RAW_BYTE_LEN + u32::RAW_BYTE_LEN + u32::RAW_BYTE_LEN;
}

/// [`meta`](https://docs.microsoft.com/en-us/typography/opentype/spec/meta)
#[derive(Debug, Clone, Copy)]
#[doc(hidden)]
pub struct MetaMarker {
    data_maps_byte_len: usize,
}

impl MetaMarker {
    pub fn version_byte_range(&self) -> Range<usize> {
        let start = 0;
        start..start + u32::RAW_BYTE_LEN
    }

    pub fn flags_byte_range(&self) -> Range<usize> {
        let start = self.version_byte_range().end;
        start..start + u32::RAW_BYTE_LEN
    }

    pub fn reserved_byte_range(&self) -> Range<usize> {
        let start = self.flags_byte_range().end;
        start..start + u32::RAW_BYTE_LEN
    }

    pub fn data_maps_count_byte_range(&self) -> Range<usize> {
        let start = self.reserved_byte_range().end;
        start..start + u32::RAW_BYTE_LEN
    }

    pub fn data_maps_byte_range(&self) -> Range<usize> {
        let start = self.data_maps_count_byte_range().end;
        start..start + self.data_maps_byte_len
    }
}

impl MinByteRange for MetaMarker {
    fn min_byte_range(&self) -> Range<usize> {
        0..self.data_maps_byte_range().end
    }
}

impl TopLevelTable for Meta<'_> {
    /// `meta`
    const TAG: Tag = Tag::new(b"meta");
}

impl<'a> FontRead<'a> for Meta<'a> {
    #[inline]
    fn read(data: FontData<'a>) -> Result<Self, ReadError> {
        let mut cursor = data.cursor();
        let fixed_fields: &'a MetaFixedFields = cursor.read_ref()?;
        let data_maps_count = fixed_fields.data_maps_count.get();
        let data_maps_byte_len = (data_maps_count as usize)
            .checked_mul(DataMapRecord::RAW_BYTE_LEN)
            .ok_or(ReadError::OutOfBounds)?;
        cursor.advance_by(data_maps_byte_len);
        cursor.finish(MetaMarker { data_maps_byte_len }, fixed_fields)
    }
}

/// [`meta`](https://docs.microsoft.com/en-us/typography/opentype/spec/meta)
pub type Meta<'a> = TableRef<'a, MetaMarker, MetaFixedFields>;

#[allow(clippy::needless_lifetimes)]
impl<'a> Meta<'a> {
    /// Version number of the metadata table — set to 1.
    #[inline]
    pub fn version(&self) -> u32 {
        self.fixed_fields().version.get()
    }

    /// Flags — currently unused; set to 0.
    #[inline]
    pub fn flags(&self) -> u32 {
        self.fixed_fields().flags.get()
    }

    /// The number of data maps in the table.
    #[inline]
    pub fn data_maps_count(&self) -> u32 {
        self.fixed_fields().data_maps_count.get()
    }

    /// Array of data map records.
    #[inline]
    pub fn data_maps(&self) -> &'a [DataMapRecord] {
        let range = self.shape.data_maps_byte_range();
        self.data.read_array(range).unwrap()
    }
}

#[cfg(feature = "experimental_traverse")]
impl<'a> SomeTable<'a> for Meta<'a> {
    fn type_name(&self) -> &str {
        "Meta"
    }
    fn get_field(&self, idx: usize) -> Option<Field<'a>> {
        match idx {
            0usize => Some(Field::new("version", self.version())),
            1usize => Some(Field::new("flags", self.flags())),
            2usize => Some(Field::new("data_maps_count", self.data_maps_count())),
            3usize => Some(Field::new(
                "data_maps",
                traversal::FieldType::array_of_records(
                    stringify!(DataMapRecord),
                    self.data_maps(),
                    self.offset_data(),
                ),
            )),
            _ => None,
        }
    }
}

#[cfg(feature = "experimental_traverse")]
#[allow(clippy::needless_lifetimes)]
impl<'a> std::fmt::Debug for Meta<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        (self as &dyn SomeTable<'a>).fmt(f)
    }
}

///  <https://learn.microsoft.com/en-us/typography/opentype/spec/meta#table-formats>
#[derive(Clone, Debug, Copy, bytemuck :: AnyBitPattern)]
#[repr(C)]
#[repr(packed)]
pub struct DataMapRecord {
    /// A tag indicating the type of metadata.
    pub tag: BigEndian<Tag>,
    /// Offset in bytes from the beginning of the metadata table to the data for this tag.
    pub data_offset: BigEndian<Offset32>,
    /// Length of the data, in bytes. The data is not required to be padded to any byte boundary.
    pub data_length: BigEndian<u32>,
}

impl DataMapRecord {
    /// A tag indicating the type of metadata.
    #[inline]
    pub fn tag(&self) -> Tag {
        self.tag.get()
    }

    /// Offset in bytes from the beginning of the metadata table to the data for this tag.
    #[inline]
    pub fn data_offset(&self) -> Offset32 {
        self.data_offset.get()
    }

    /// Offset in bytes from the beginning of the metadata table to the data for this tag.
    ///
    /// The `data` argument should be retrieved from the parent table
    /// By calling its `offset_data` method.
    #[inline]
    pub fn data<'a>(&self, data: FontData<'a>) -> Result<Metadata<'a>, ReadError> {
        let args = (self.tag(), self.data_length());
        self.data_offset().resolve_with_args(data, &args)
    }

    /// Length of the data, in bytes. The data is not required to be padded to any byte boundary.
    #[inline]
    pub fn data_length(&self) -> u32 {
        self.data_length.get()
    }
}

impl FixedSize for DataMapRecord {
    const RAW_BYTE_LEN: usize = Tag::RAW_BYTE_LEN + Offset32::RAW_BYTE_LEN + u32::RAW_BYTE_LEN;
}

#[cfg(feature = "experimental_traverse")]
impl<'a> SomeRecord<'a> for DataMapRecord {
    fn traverse(self, data: FontData<'a>) -> RecordResolver<'a> {
        RecordResolver {
            name: "DataMapRecord",
            get_field: Box::new(move |idx, _data| match idx {
                0usize => Some(Field::new("tag", self.tag())),
                1usize => Some(Field::new("data_offset", traversal::FieldType::Unknown)),
                2usize => Some(Field::new("data_length", self.data_length())),
                _ => None,
            }),
            data,
        }
    }
}
