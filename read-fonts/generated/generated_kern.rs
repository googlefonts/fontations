// THIS FILE IS AUTOGENERATED.
// Any changes to this file will be overwritten.
// For more information about how codegen works, see font-codegen/README.md

#[allow(unused_imports)]
use crate::codegen_prelude::*;

/// The [kern (Kerning)](https://docs.microsoft.com/en-us/typography/opentype/spec/kern) table
#[derive(Debug, Clone, Copy)]
#[doc(hidden)]
pub struct KernMarker {
    subtables_byte_len: usize,
}

impl KernMarker {
    pub fn version_byte_range(&self) -> Range<usize> {
        let start = 0;
        start..start + u16::RAW_BYTE_LEN
    }

    pub fn num_tables_byte_range(&self) -> Range<usize> {
        let start = self.version_byte_range().end;
        start..start + u16::RAW_BYTE_LEN
    }

    pub fn subtables_byte_range(&self) -> Range<usize> {
        let start = self.num_tables_byte_range().end;
        start..start + self.subtables_byte_len
    }
}

impl MinByteRange for KernMarker {
    fn min_byte_range(&self) -> Range<usize> {
        0..self.subtables_byte_range().end
    }
}

impl TopLevelTable for Kern<'_> {
    /// `kern`
    const TAG: Tag = Tag::new(b"kern");
}

impl<'a> FontRead<'a> for Kern<'a> {
    fn read(data: FontData<'a>) -> Result<Self, ReadError> {
        let mut cursor = data.cursor();
        cursor.advance::<u16>();
        let num_tables: u16 = cursor.read()?;
        let subtables_byte_len = {
            let data = cursor.remaining().ok_or(ReadError::OutOfBounds)?;
            <Kern0 as VarSize>::total_len_for_count(data, num_tables as usize)?
        };
        cursor.advance_by(subtables_byte_len);
        cursor.finish(KernMarker { subtables_byte_len })
    }
}

/// The [kern (Kerning)](https://docs.microsoft.com/en-us/typography/opentype/spec/kern) table
pub type Kern<'a> = TableRef<'a, KernMarker>;

#[allow(clippy::needless_lifetimes)]
impl<'a> Kern<'a> {
    /// Table version number â€” set to 0.
    pub fn version(&self) -> u16 {
        let range = self.shape.version_byte_range();
        self.data.read_at(range.start).unwrap()
    }

    /// Number of subtables in the kerning table
    pub fn num_tables(&self) -> u16 {
        let range = self.shape.num_tables_byte_range();
        self.data.read_at(range.start).unwrap()
    }

    pub fn subtables(&self) -> VarLenArray<'a, Kern0> {
        let range = self.shape.subtables_byte_range();
        VarLenArray::read(self.data.split_off(range.start).unwrap()).unwrap()
    }
}

#[cfg(feature = "experimental_traverse")]
impl<'a> SomeTable<'a> for Kern<'a> {
    fn type_name(&self) -> &str {
        "Kern"
    }
    fn get_field(&self, idx: usize) -> Option<Field<'a>> {
        match idx {
            0usize => Some(Field::new("version", self.version())),
            1usize => Some(Field::new("num_tables", self.num_tables())),
            2usize => Some(Field::new("subtables", traversal::FieldType::Unknown)),
            _ => None,
        }
    }
}

#[cfg(feature = "experimental_traverse")]
#[allow(clippy::needless_lifetimes)]
impl<'a> std::fmt::Debug for Kern<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        (self as &dyn SomeTable<'a>).fmt(f)
    }
}

/// The `macStyle` field for the head table.
#[derive(Clone, Copy, Default, PartialEq, Eq, PartialOrd, Ord, Hash, bytemuck :: AnyBitPattern)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[repr(transparent)]
pub struct KernCoverage {
    bits: u16,
}

impl KernCoverage {
    /// Bit 0: 1 if horizontal, 0 if vertical
    pub const HORIZONTAL: Self = Self { bits: 0x0001 };

    /// Bit 1: 1 if table contains minimum values, 0 if kern values
    pub const MINIMUM: Self = Self { bits: 0x0002 };

    /// Bit 2: If set to 1, kerning is perpendicular to the flow of the text.
    ///
    /// If the text is normally written horizontally, kerning will be done in
    /// the up and down directions. If kerning values are positive, the text
    /// will be kerned upwards; if they are negative, the text will be kerned
    /// downwards.
    ///
    /// If the text is normally written vertically, kerning will be done in the
    /// left and right directions. If kerning values are positive, the text
    /// will be kerned to the right; if they are negative, the text will be
    /// kerned to the left.
    ///
    /// The value 0x8000 in the kerning data resets the cross-stream kerning
    /// back to 0.
    pub const CROSS_STREAM: Self = Self { bits: 0x0004 };

    /// Bit 3: If this bit is set to 1 the value in this table should replace
    /// the value currently being accumulated.
    pub const OVERRIDE: Self = Self { bits: 0x0008 };

    /// Bit 4: Shadow (if set to 1)
    pub const SHADOW: Self = Self { bits: 0x0010 };

    /// Bit 5: Condensed (if set to 1)
    pub const CONDENSED: Self = Self { bits: 0x0020 };

    /// Bit 6: Extended (if set to 1)
    pub const EXTENDED: Self = Self { bits: 0x0040 };
}

impl KernCoverage {
    ///  Returns an empty set of flags.
    #[inline]
    pub const fn empty() -> Self {
        Self { bits: 0 }
    }

    /// Returns the set containing all flags.
    #[inline]
    pub const fn all() -> Self {
        Self {
            bits: Self::HORIZONTAL.bits
                | Self::MINIMUM.bits
                | Self::CROSS_STREAM.bits
                | Self::OVERRIDE.bits
                | Self::SHADOW.bits
                | Self::CONDENSED.bits
                | Self::EXTENDED.bits,
        }
    }

    /// Returns the raw value of the flags currently stored.
    #[inline]
    pub const fn bits(&self) -> u16 {
        self.bits
    }

    /// Convert from underlying bit representation, unless that
    /// representation contains bits that do not correspond to a flag.
    #[inline]
    pub const fn from_bits(bits: u16) -> Option<Self> {
        if (bits & !Self::all().bits()) == 0 {
            Some(Self { bits })
        } else {
            None
        }
    }

    /// Convert from underlying bit representation, dropping any bits
    /// that do not correspond to flags.
    #[inline]
    pub const fn from_bits_truncate(bits: u16) -> Self {
        Self {
            bits: bits & Self::all().bits,
        }
    }

    /// Returns `true` if no flags are currently stored.
    #[inline]
    pub const fn is_empty(&self) -> bool {
        self.bits() == Self::empty().bits()
    }

    /// Returns `true` if there are flags common to both `self` and `other`.
    #[inline]
    pub const fn intersects(&self, other: Self) -> bool {
        !(Self {
            bits: self.bits & other.bits,
        })
        .is_empty()
    }

    /// Returns `true` if all of the flags in `other` are contained within `self`.
    #[inline]
    pub const fn contains(&self, other: Self) -> bool {
        (self.bits & other.bits) == other.bits
    }

    /// Inserts the specified flags in-place.
    #[inline]
    pub fn insert(&mut self, other: Self) {
        self.bits |= other.bits;
    }

    /// Removes the specified flags in-place.
    #[inline]
    pub fn remove(&mut self, other: Self) {
        self.bits &= !other.bits;
    }

    /// Toggles the specified flags in-place.
    #[inline]
    pub fn toggle(&mut self, other: Self) {
        self.bits ^= other.bits;
    }

    /// Returns the intersection between the flags in `self` and
    /// `other`.
    ///
    /// Specifically, the returned set contains only the flags which are
    /// present in *both* `self` *and* `other`.
    ///
    /// This is equivalent to using the `&` operator (e.g.
    /// [`ops::BitAnd`]), as in `flags & other`.
    ///
    /// [`ops::BitAnd`]: https://doc.rust-lang.org/std/ops/trait.BitAnd.html
    #[inline]
    #[must_use]
    pub const fn intersection(self, other: Self) -> Self {
        Self {
            bits: self.bits & other.bits,
        }
    }

    /// Returns the union of between the flags in `self` and `other`.
    ///
    /// Specifically, the returned set contains all flags which are
    /// present in *either* `self` *or* `other`, including any which are
    /// present in both.
    ///
    /// This is equivalent to using the `|` operator (e.g.
    /// [`ops::BitOr`]), as in `flags | other`.
    ///
    /// [`ops::BitOr`]: https://doc.rust-lang.org/std/ops/trait.BitOr.html
    #[inline]
    #[must_use]
    pub const fn union(self, other: Self) -> Self {
        Self {
            bits: self.bits | other.bits,
        }
    }

    /// Returns the difference between the flags in `self` and `other`.
    ///
    /// Specifically, the returned set contains all flags present in
    /// `self`, except for the ones present in `other`.
    ///
    /// It is also conceptually equivalent to the "bit-clear" operation:
    /// `flags & !other` (and this syntax is also supported).
    ///
    /// This is equivalent to using the `-` operator (e.g.
    /// [`ops::Sub`]), as in `flags - other`.
    ///
    /// [`ops::Sub`]: https://doc.rust-lang.org/std/ops/trait.Sub.html
    #[inline]
    #[must_use]
    pub const fn difference(self, other: Self) -> Self {
        Self {
            bits: self.bits & !other.bits,
        }
    }
}

impl std::ops::BitOr for KernCoverage {
    type Output = Self;

    /// Returns the union of the two sets of flags.
    #[inline]
    fn bitor(self, other: KernCoverage) -> Self {
        Self {
            bits: self.bits | other.bits,
        }
    }
}

impl std::ops::BitOrAssign for KernCoverage {
    /// Adds the set of flags.
    #[inline]
    fn bitor_assign(&mut self, other: Self) {
        self.bits |= other.bits;
    }
}

impl std::ops::BitXor for KernCoverage {
    type Output = Self;

    /// Returns the left flags, but with all the right flags toggled.
    #[inline]
    fn bitxor(self, other: Self) -> Self {
        Self {
            bits: self.bits ^ other.bits,
        }
    }
}

impl std::ops::BitXorAssign for KernCoverage {
    /// Toggles the set of flags.
    #[inline]
    fn bitxor_assign(&mut self, other: Self) {
        self.bits ^= other.bits;
    }
}

impl std::ops::BitAnd for KernCoverage {
    type Output = Self;

    /// Returns the intersection between the two sets of flags.
    #[inline]
    fn bitand(self, other: Self) -> Self {
        Self {
            bits: self.bits & other.bits,
        }
    }
}

impl std::ops::BitAndAssign for KernCoverage {
    /// Disables all flags disabled in the set.
    #[inline]
    fn bitand_assign(&mut self, other: Self) {
        self.bits &= other.bits;
    }
}

impl std::ops::Sub for KernCoverage {
    type Output = Self;

    /// Returns the set difference of the two sets of flags.
    #[inline]
    fn sub(self, other: Self) -> Self {
        Self {
            bits: self.bits & !other.bits,
        }
    }
}

impl std::ops::SubAssign for KernCoverage {
    /// Disables all flags enabled in the set.
    #[inline]
    fn sub_assign(&mut self, other: Self) {
        self.bits &= !other.bits;
    }
}

impl std::ops::Not for KernCoverage {
    type Output = Self;

    /// Returns the complement of this set of flags.
    #[inline]
    fn not(self) -> Self {
        Self { bits: !self.bits } & Self::all()
    }
}

impl std::fmt::Debug for KernCoverage {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let members: &[(&str, Self)] = &[
            ("HORIZONTAL", Self::HORIZONTAL),
            ("MINIMUM", Self::MINIMUM),
            ("CROSS_STREAM", Self::CROSS_STREAM),
            ("OVERRIDE", Self::OVERRIDE),
            ("SHADOW", Self::SHADOW),
            ("CONDENSED", Self::CONDENSED),
            ("EXTENDED", Self::EXTENDED),
        ];
        let mut first = true;
        for (name, value) in members {
            if self.contains(*value) {
                if !first {
                    f.write_str(" | ")?;
                }
                first = false;
                f.write_str(name)?;
            }
        }
        if first {
            f.write_str("(empty)")?;
        }
        Ok(())
    }
}

impl std::fmt::Binary for KernCoverage {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        std::fmt::Binary::fmt(&self.bits, f)
    }
}

impl std::fmt::Octal for KernCoverage {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        std::fmt::Octal::fmt(&self.bits, f)
    }
}

impl std::fmt::LowerHex for KernCoverage {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        std::fmt::LowerHex::fmt(&self.bits, f)
    }
}

impl std::fmt::UpperHex for KernCoverage {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        std::fmt::UpperHex::fmt(&self.bits, f)
    }
}

impl font_types::Scalar for KernCoverage {
    type Raw = <u16 as font_types::Scalar>::Raw;
    fn to_raw(self) -> Self::Raw {
        self.bits().to_raw()
    }
    fn from_raw(raw: Self::Raw) -> Self {
        let t = <u16>::from_raw(raw);
        Self::from_bits_truncate(t)
    }
}

#[cfg(feature = "experimental_traverse")]
impl<'a> From<KernCoverage> for FieldType<'a> {
    fn from(src: KernCoverage) -> FieldType<'a> {
        src.bits().into()
    }
}

impl Format<u16> for Kern0Marker {
    const FORMAT: u16 = 0;
}

/// [kern Format 0](https://docs.microsoft.com/en-us/typography/opentype/spec/kern#format-0)
#[derive(Debug, Clone, Copy)]
#[doc(hidden)]
pub struct Kern0Marker {
    kerning_pairs_byte_len: usize,
}

impl Kern0Marker {
    pub fn format_byte_range(&self) -> Range<usize> {
        let start = 0;
        start..start + u16::RAW_BYTE_LEN
    }

    pub fn length_byte_range(&self) -> Range<usize> {
        let start = self.format_byte_range().end;
        start..start + u16::RAW_BYTE_LEN
    }

    pub fn coverage_byte_range(&self) -> Range<usize> {
        let start = self.length_byte_range().end;
        start..start + KernCoverage::RAW_BYTE_LEN
    }

    pub fn num_pairs_byte_range(&self) -> Range<usize> {
        let start = self.coverage_byte_range().end;
        start..start + u16::RAW_BYTE_LEN
    }

    pub fn search_range_byte_range(&self) -> Range<usize> {
        let start = self.num_pairs_byte_range().end;
        start..start + u16::RAW_BYTE_LEN
    }

    pub fn entry_selector_byte_range(&self) -> Range<usize> {
        let start = self.search_range_byte_range().end;
        start..start + u16::RAW_BYTE_LEN
    }

    pub fn range_shift_byte_range(&self) -> Range<usize> {
        let start = self.entry_selector_byte_range().end;
        start..start + u16::RAW_BYTE_LEN
    }

    pub fn kerning_pairs_byte_range(&self) -> Range<usize> {
        let start = self.range_shift_byte_range().end;
        start..start + self.kerning_pairs_byte_len
    }
}

impl MinByteRange for Kern0Marker {
    fn min_byte_range(&self) -> Range<usize> {
        0..self.kerning_pairs_byte_range().end
    }
}

impl<'a> FontRead<'a> for Kern0<'a> {
    fn read(data: FontData<'a>) -> Result<Self, ReadError> {
        let mut cursor = data.cursor();
        cursor.advance::<u16>();
        cursor.advance::<u16>();
        cursor.advance::<KernCoverage>();
        let num_pairs: u16 = cursor.read()?;
        cursor.advance::<u16>();
        cursor.advance::<u16>();
        cursor.advance::<u16>();
        let kerning_pairs_byte_len = (num_pairs as usize)
            .checked_mul(KernPair::RAW_BYTE_LEN)
            .ok_or(ReadError::OutOfBounds)?;
        cursor.advance_by(kerning_pairs_byte_len);
        cursor.finish(Kern0Marker {
            kerning_pairs_byte_len,
        })
    }
}

/// [kern Format 0](https://docs.microsoft.com/en-us/typography/opentype/spec/kern#format-0)
pub type Kern0<'a> = TableRef<'a, Kern0Marker>;

#[allow(clippy::needless_lifetimes)]
impl<'a> Kern0<'a> {
    /// Format number is set to 0.
    pub fn format(&self) -> u16 {
        let range = self.shape.format_byte_range();
        self.data.read_at(range.start).unwrap()
    }

    /// The length of the subtable, in bytes (including this header).
    pub fn length(&self) -> u16 {
        let range = self.shape.length_byte_range();
        self.data.read_at(range.start).unwrap()
    }

    /// What type of information is contained in this table.
    pub fn coverage(&self) -> KernCoverage {
        let range = self.shape.coverage_byte_range();
        self.data.read_at(range.start).unwrap()
    }

    /// This gives the number of kerning pairs in the table.
    pub fn num_pairs(&self) -> u16 {
        let range = self.shape.num_pairs_byte_range();
        self.data.read_at(range.start).unwrap()
    }

    /// The largest power of two less than or equal to the value of num_pairs, multiplied by the
    /// size in bytes of an entry in the table.
    pub fn search_range(&self) -> u16 {
        let range = self.shape.search_range_byte_range();
        self.data.read_at(range.start).unwrap()
    }

    /// This is calculated as log2 of the largest power of two less than or equal to the value of num_pairs.
    /// This value indicates how many iterations of the search loop will have to be made.
    /// (For example, in a list of eight items, there would have to be three iterations of the loop).
    pub fn entry_selector(&self) -> u16 {
        let range = self.shape.entry_selector_byte_range();
        self.data.read_at(range.start).unwrap()
    }

    /// The value of num_pairs minus the largest power of two less than or equal to num_pairs,
    /// and then multiplied by the size in bytes of an entry in the table.
    pub fn range_shift(&self) -> u16 {
        let range = self.shape.range_shift_byte_range();
        self.data.read_at(range.start).unwrap()
    }

    /// Kern pairs
    pub fn kerning_pairs(&self) -> &'a [KernPair] {
        let range = self.shape.kerning_pairs_byte_range();
        self.data.read_array(range).unwrap()
    }
}

#[cfg(feature = "experimental_traverse")]
impl<'a> SomeTable<'a> for Kern0<'a> {
    fn type_name(&self) -> &str {
        "Kern0"
    }
    fn get_field(&self, idx: usize) -> Option<Field<'a>> {
        match idx {
            0usize => Some(Field::new("format", self.format())),
            1usize => Some(Field::new("length", self.length())),
            2usize => Some(Field::new("coverage", self.coverage())),
            3usize => Some(Field::new("num_pairs", self.num_pairs())),
            4usize => Some(Field::new("search_range", self.search_range())),
            5usize => Some(Field::new("entry_selector", self.entry_selector())),
            6usize => Some(Field::new("range_shift", self.range_shift())),
            7usize => Some(Field::new(
                "kerning_pairs",
                traversal::FieldType::array_of_records(
                    stringify!(KernPair),
                    self.kerning_pairs(),
                    self.offset_data(),
                ),
            )),
            _ => None,
        }
    }
}

#[cfg(feature = "experimental_traverse")]
#[allow(clippy::needless_lifetimes)]
impl<'a> std::fmt::Debug for Kern0<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        (self as &dyn SomeTable<'a>).fmt(f)
    }
}

#[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Copy, bytemuck :: AnyBitPattern)]
#[repr(C)]
#[repr(packed)]
pub struct KernPair {
    /// The glyph index for the left-hand glyph in the kerning pair.
    pub left: BigEndian<u16>,
    /// The glyph index for the right-hand glyph in the kerning pair.
    pub right: BigEndian<u16>,
    /// The kerning value for the above pair, in font design units.
    /// If this value is greater than zero, the characters will be moved apart.
    /// If this value is less than zero, the character will be moved closer together.
    pub value: BigEndian<FWord>,
}

impl KernPair {
    /// The glyph index for the left-hand glyph in the kerning pair.
    pub fn left(&self) -> u16 {
        self.left.get()
    }

    /// The glyph index for the right-hand glyph in the kerning pair.
    pub fn right(&self) -> u16 {
        self.right.get()
    }

    /// The kerning value for the above pair, in font design units.
    /// If this value is greater than zero, the characters will be moved apart.
    /// If this value is less than zero, the character will be moved closer together.
    pub fn value(&self) -> FWord {
        self.value.get()
    }
}

impl FixedSize for KernPair {
    const RAW_BYTE_LEN: usize = u16::RAW_BYTE_LEN + u16::RAW_BYTE_LEN + FWord::RAW_BYTE_LEN;
}

#[cfg(feature = "experimental_traverse")]
impl<'a> SomeRecord<'a> for KernPair {
    fn traverse(self, data: FontData<'a>) -> RecordResolver<'a> {
        RecordResolver {
            name: "KernPair",
            get_field: Box::new(move |idx, _data| match idx {
                0usize => Some(Field::new("left", self.left())),
                1usize => Some(Field::new("right", self.right())),
                2usize => Some(Field::new("value", self.value())),
                _ => None,
            }),
            data,
        }
    }
}
