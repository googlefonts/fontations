// THIS FILE IS AUTOGENERATED.
// Any changes to this file will be overwritten.
// For more information about how codegen works, see font-codegen/README.md

#[allow(unused_imports)]
use crate::codegen_prelude::*;

#[derive(Copy, Clone, Debug, bytemuck :: AnyBitPattern)]
#[repr(C)]
#[repr(packed)]
pub struct HdmxFixedFields {
    pub version: BigEndian<u16>,
    pub num_records: BigEndian<u16>,
    pub size_device_record: BigEndian<u32>,
}

impl FixedSize for HdmxFixedFields {
    const RAW_BYTE_LEN: usize = u16::RAW_BYTE_LEN + u16::RAW_BYTE_LEN + u32::RAW_BYTE_LEN;
}

/// The [Horizontal Device Metrics](https://learn.microsoft.com/en-us/typography/opentype/spec/hdmx) table.
#[derive(Debug, Clone, Copy)]
#[doc(hidden)]
pub struct HdmxMarker {
    num_glyphs: u16,
    records_byte_len: usize,
}

impl HdmxMarker {
    pub fn version_byte_range(&self) -> Range<usize> {
        let start = 0;
        start..start + u16::RAW_BYTE_LEN
    }

    pub fn num_records_byte_range(&self) -> Range<usize> {
        let start = self.version_byte_range().end;
        start..start + u16::RAW_BYTE_LEN
    }

    pub fn size_device_record_byte_range(&self) -> Range<usize> {
        let start = self.num_records_byte_range().end;
        start..start + u32::RAW_BYTE_LEN
    }

    pub fn records_byte_range(&self) -> Range<usize> {
        let start = self.size_device_record_byte_range().end;
        start..start + self.records_byte_len
    }
}

impl MinByteRange for HdmxMarker {
    fn min_byte_range(&self) -> Range<usize> {
        0..self.records_byte_range().end
    }
}

impl TopLevelTable for Hdmx<'_> {
    /// `hdmx`
    const TAG: Tag = Tag::new(b"hdmx");
}

impl ReadArgs for Hdmx<'_> {
    type Args = u16;
}

impl<'a> FontReadWithArgs<'a> for Hdmx<'a> {
    #[inline]
    fn read_with_args(data: FontData<'a>, args: &u16) -> Result<Self, ReadError> {
        let num_glyphs = *args;
        let (mut cursor, table_data) = Cursor::start::<HdmxFixedFields>(data)?;
        let _header = table_data.header();
        let num_records = _header.num_records.get();
        let size_device_record = _header.size_device_record.get();
        let records_byte_len = (num_records as usize)
            .checked_mul(<DeviceRecord as ComputeSize>::compute_size(&(
                num_glyphs,
                size_device_record,
            ))?)
            .ok_or(ReadError::OutOfBounds)?;
        cursor.advance_by(records_byte_len);
        cursor.finish(
            HdmxMarker {
                num_glyphs,
                records_byte_len,
            },
            table_data,
        )
    }
}

impl<'a> Hdmx<'a> {
    /// A constructor that requires additional arguments.
    ///
    /// This type requires some external state in order to be
    /// parsed.
    #[inline]
    pub fn read(data: FontData<'a>, num_glyphs: u16) -> Result<Self, ReadError> {
        let args = num_glyphs;
        Self::read_with_args(data, &args)
    }
}

/// The [Horizontal Device Metrics](https://learn.microsoft.com/en-us/typography/opentype/spec/hdmx) table.
pub type Hdmx<'a> = TableRef<'a, HdmxMarker, HdmxFixedFields>;

#[allow(clippy::needless_lifetimes)]
impl<'a> Hdmx<'a> {
    /// Table version number (set to 0).
    #[inline]
    pub fn version(&self) -> u16 {
        self.fixed_fields().version.get()
    }

    /// Number of device records.
    #[inline]
    pub fn num_records(&self) -> u16 {
        self.fixed_fields().num_records.get()
    }

    /// Size of device record, 32-bit aligned.
    #[inline]
    pub fn size_device_record(&self) -> u32 {
        self.fixed_fields().size_device_record.get()
    }

    /// Array of device records.
    #[inline]
    pub fn records(&self) -> ComputedArray<'a, DeviceRecord<'a>> {
        let range = self.shape.records_byte_range();
        self.offset_data()
            .read_with_args(range, &(self.num_glyphs(), self.size_device_record()))
            .unwrap()
    }

    pub(crate) fn num_glyphs(&self) -> u16 {
        self.shape.num_glyphs
    }
}

#[cfg(feature = "experimental_traverse")]
impl<'a> SomeTable<'a> for Hdmx<'a> {
    fn type_name(&self) -> &str {
        "Hdmx"
    }
    fn get_field(&self, idx: usize) -> Option<Field<'a>> {
        match idx {
            0usize => Some(Field::new("version", self.version())),
            1usize => Some(Field::new("num_records", self.num_records())),
            2usize => Some(Field::new("size_device_record", self.size_device_record())),
            3usize => Some(Field::new(
                "records",
                traversal::FieldType::computed_array(
                    "DeviceRecord",
                    self.records(),
                    self.offset_data(),
                ),
            )),
            _ => None,
        }
    }
}

#[cfg(feature = "experimental_traverse")]
#[allow(clippy::needless_lifetimes)]
impl<'a> std::fmt::Debug for Hdmx<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        (self as &dyn SomeTable<'a>).fmt(f)
    }
}
