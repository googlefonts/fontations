// THIS FILE IS AUTOGENERATED.
// Any changes to this file will be overwritten.
// For more information about how codegen works, see font-codegen/README.md

#[allow(unused_imports)]
use crate::codegen_prelude::*;

#[derive(Copy, Clone, Debug, bytemuck :: AnyBitPattern)]
#[repr(C)]
#[repr(packed)]
pub struct CvarFixedFields {
    pub version: BigEndian<MajorMinor>,
    pub tuple_variation_count: BigEndian<TupleVariationCount>,
    pub data_offset: BigEndian<Offset16>,
}

impl FixedSize for CvarFixedFields {
    const RAW_BYTE_LEN: usize =
        MajorMinor::RAW_BYTE_LEN + TupleVariationCount::RAW_BYTE_LEN + Offset16::RAW_BYTE_LEN;
}

/// The [cvar](https://learn.microsoft.com/en-us/typography/opentype/spec/cvar) table.
#[derive(Debug, Clone, Copy)]
#[doc(hidden)]
pub struct CvarMarker {
    tuple_variation_headers_byte_len: usize,
}

impl CvarMarker {
    pub fn version_byte_range(&self) -> Range<usize> {
        let start = 0;
        start..start + MajorMinor::RAW_BYTE_LEN
    }

    pub fn tuple_variation_count_byte_range(&self) -> Range<usize> {
        let start = self.version_byte_range().end;
        start..start + TupleVariationCount::RAW_BYTE_LEN
    }

    pub fn data_offset_byte_range(&self) -> Range<usize> {
        let start = self.tuple_variation_count_byte_range().end;
        start..start + Offset16::RAW_BYTE_LEN
    }

    pub fn tuple_variation_headers_byte_range(&self) -> Range<usize> {
        let start = self.data_offset_byte_range().end;
        start..start + self.tuple_variation_headers_byte_len
    }
}

impl MinByteRange for CvarMarker {
    fn min_byte_range(&self) -> Range<usize> {
        0..self.tuple_variation_headers_byte_range().end
    }
}

impl TopLevelTable for Cvar<'_> {
    /// `cvar`
    const TAG: Tag = Tag::new(b"cvar");
}

impl<'a> FontRead<'a> for Cvar<'a> {
    #[inline]
    fn read(data: FontData<'a>) -> Result<Self, ReadError> {
        let mut cursor = data.cursor();
        let fixed_fields: &'a CvarFixedFields = cursor.read_ref()?;
        let tuple_variation_headers_byte_len = cursor.remaining_bytes();
        cursor.advance_by(tuple_variation_headers_byte_len);
        cursor.finish(
            CvarMarker {
                tuple_variation_headers_byte_len,
            },
            fixed_fields,
        )
    }
}

/// The [cvar](https://learn.microsoft.com/en-us/typography/opentype/spec/cvar) table.
pub type Cvar<'a> = TableRef<'a, CvarMarker, CvarFixedFields>;

#[allow(clippy::needless_lifetimes)]
impl<'a> Cvar<'a> {
    /// Major/minor version number of the CVT variations table â€” set to (1,0).
    #[inline]
    pub fn version(&self) -> MajorMinor {
        self.fixed_fields().version.get()
    }

    /// A packed field. The high 4 bits are flags, and the low 12 bits
    /// are the number of tuple variation tables for this glyph. The
    /// number of tuple variation tables can be any number between 1
    /// and 4095.
    #[inline]
    pub fn tuple_variation_count(&self) -> TupleVariationCount {
        self.fixed_fields().tuple_variation_count.get()
    }

    /// Offset from the start of the 'cvar' table to the serialized data.
    #[inline]
    pub fn data_offset(&self) -> Offset16 {
        self.fixed_fields().data_offset.get()
    }

    /// Attempt to resolve [`data_offset`][Self::data_offset].
    #[inline]
    pub fn data(&self) -> Result<FontData<'a>, ReadError> {
        let data = self.data;
        self.data_offset().resolve(data)
    }

    /// Array of tuple variation headers.
    #[inline]
    pub fn tuple_variation_headers(&self) -> VarLenArray<'a, TupleVariationHeader> {
        let range = self.shape.tuple_variation_headers_byte_range();
        VarLenArray::read(self.data.split_off(range.start).unwrap()).unwrap()
    }
}

#[cfg(feature = "experimental_traverse")]
impl<'a> SomeTable<'a> for Cvar<'a> {
    fn type_name(&self) -> &str {
        "Cvar"
    }
    fn get_field(&self, idx: usize) -> Option<Field<'a>> {
        match idx {
            0usize => Some(Field::new("version", self.version())),
            1usize => Some(Field::new(
                "tuple_variation_count",
                traversal::FieldType::Unknown,
            )),
            2usize => Some(Field::new("data_offset", traversal::FieldType::Unknown)),
            3usize => Some(Field::new(
                "tuple_variation_headers",
                traversal::FieldType::Unknown,
            )),
            _ => None,
        }
    }
}

#[cfg(feature = "experimental_traverse")]
#[allow(clippy::needless_lifetimes)]
impl<'a> std::fmt::Debug for Cvar<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        (self as &dyn SomeTable<'a>).fmt(f)
    }
}
